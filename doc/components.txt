Framework COMPONENTS are classes that are intended to
be overwritten by the application as needed.

Take the "storage" component, for example.

An application (or even the framework) may use the storage component as follows:

$contents = 'some contents that should be saved to disk';

Storage::save('file.txt', $contents);


The default component is defined in

framework2/librarias/Phidias/Component/Storage like so:

namespace Phidias\Component;

class Storage implements Storage_Interface
{
    public static function save($filename, $contents)
    {
        file_put_contents($filename, $contents);
    }
}


EVERY Phidias component MUST implement the provided component interface, defined in framework2/librarias/Phidias/Component/*/Interface.php

Now, suppose we wish to override this component with a custom one:

myapp/libraries/components/myStorage.php:

class myStorage implements \Phidias\Component\Storage\Interface
{
    public static function save($filename, $contents)
    {
        .... arbitrary "save" implementation ....
    }
}

as long as the component implements the corresponding interface it can be enabled with a Configuration value:

Configuration::set('component.storage', 'myStorage');

the framework will then use "Storage" as a class alias to "myStorage"